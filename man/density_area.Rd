% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/density_area.R
\name{density_area}
\alias{density_area}
\title{Density Area}
\usage{
density_area(
  x,
  y,
  probs = 0.5,
  as_sf = F,
  as_list = T,
  range_mult = 0.25,
  rangex = NULL,
  rangey = NULL,
  ...
)
}
\arguments{
\item{x, y}{Numeric data dimensions}

\item{probs}{Probabilities to compute density polygons for}

\item{as_sf}{Should the returned values be \link[sf:sf]{sf::sf}? Defaults to \code{FALSE}.}

\item{as_list}{Should the returned value be a list? Defaults to \code{TRUE} to
work well with tidyverse list columns}

\item{range_mult}{A multiplier to the range of \code{x} and \code{y} across which the
probability density will be estimated.}

\item{rangex, rangey}{Custom ranges across \code{x} and \code{y} ranges across which the
probability density will be estimated.}

\item{...}{Additional arguments to be passed to \code{\link[ggdensity:get_hdr]{ggdensity::get_hdr()}}}
}
\description{
A convenience function to get just the areas of density polygons.
}
\details{
If both \code{rangex} and \code{rangey} are defined, \code{range_mult} will be disregarded.
If only one or the other of \code{rangex} and \code{rangey} are defined, \code{range_mult}
will be used to produce the range of the undefined one.
}
\examples{
library(densityarea)
library(ggplot2)
library(dplyr)
library(tidyr)
library(sf)

# basic usage

set.seed(10)
x <- rnorm(100)
y <- rnorm(100)

density_area(x,
             y,
             probs = ppoints(50),
             as_list = FALSE) ->
  poly_areas_df

head(poly_areas_df)

# Plotting the relationship between probability level and area
ggplot(poly_areas_df,
       aes(prob, area))+
  geom_line()

# Assuming distribution is circular, the radius would be `sqrt(area/pi).`
poly_areas_df |>
  mutate(
    radius = sqrt(area/pi)
  ) |>
  ggplot(aes(prob, radius)) +
    geom_line()

# Tidyverse usage

data(s01)

## Data preprocessing

s01 |>
  mutate(log_F2 = -log(F2),
         log_F1 = -log(F1))->
  s01

s01 |>
  group_by(name) |>
  summarise(
    area_df = density_area(log_F2,
                           log_F1,
                           probs = ppoints(10),
                           as_sf = FALSE,
                           n = 200),
    area_sf = density_area(log_F2,
                           log_F1,
                           probs = ppoints(10),
                           as_sf = TRUE,
                           n = 200)
  ) ->
  s01_areas

s01_areas |>
  unnest(area_df) |>
  ggplot(
    aes(prob, area)
  )+
    geom_line()

# If the shape were an equilateral triangle, each side would be
# equal to `sqrt(area * (4/sqrt(3)))`

s01_areas |>
  unnest(
    area_sf
  ) |>
  st_sf() |>
  arrange(desc(prob)) |>
  mutate(side = sqrt(area * (4/sqrt(3)))) |>
  ggplot()+
    geom_sf(aes(fill = side))
}
